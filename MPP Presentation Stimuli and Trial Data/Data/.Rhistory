foo <- c(2,3,4,5)
#Reading in all libraries that we'll use
library(irr)
source('~/Dropbox/_Projects/Gesture - Case Marking/Analysis - Post Blindcoding/AnalysisNew_MK additions.R')
source('~/Dropbox/_Projects/Gesture - Case Marking/Analysis - Post Blindcoding/AnalysisNew_MK additions.R')
install.packages("jsonlite")
library(jsonlite)
# url with some information about project in Andalussia
url <- 'http://www.juntadeandalucia.es/export/drupaljda/ayudas.json'
# read url and convert to data.frame
document <- fromJSON(txt=url)
install.packages("httr")
library(jsonlite)
# url with some information about project in Andalussia
url <- 'http://www.juntadeandalucia.es/export/drupaljda/ayudas.json'
# read url and convert to data.frame
document <- fromJSON(txt=url)
url
document
document[1,]
document[,1]
document[,3]
document[,8]
df.long = mutate(df.long, question = as.factor(question),
asdfasdfasfd)
# Packages ----------------------------------------------------------------
rm(list=ls())
library(lsr)
library(dplyr)
library(rjson)
library(RSQLite)
# Read data ---------------------------------------------------------------
con = dbConnect(SQLite(),dbname = "participants.db");
df.complete = dbReadTable(con,"almost") #change the name of the database here (mine was called "almost")
dbDisconnect(con)
#filter out incompletes
df.complete = subset(df.complete,status %in% c(3,4))
#save data of different experiments in separate data frames
df.complete.experiment_1 = subset(df.complete,codeversion == "experiment_1")
df.complete.experiment_2 = subset(df.complete,codeversion == "experiment_2")
df.complete.experiment_3 = subset(df.complete,codeversion == "experiment_3")
# EXP1: Structure data ----------------------------------------------------------
df.wide = data.frame(matrix(nrow=nrow(df.complete.experiment_1),ncol=8))
colnames(df.wide) = c("experiment","participant","id","gender","age","condition","counterbalance","feedback")
for (i in 1:nrow(df.wide)){
a = fromJSON(df.complete.experiment_1$datastring[i])
df.wide$experiment[i] = df.complete.experiment_1$codeversion[i]
df.wide$participant[i] = i
df.wide$id[i] = a$workerId
if (is.null(a$questiondata$gender)){df.wide$gender[i] = NA
}else{
df.wide$gender[i] = a$questiondata$gender
}
df.wide$age[i] = a$questiondata$age
df.wide$condition[i] = a$condition
df.wide$counterbalance[i] = a$counterbalance
#cycles through the trials
for (j in 1:8){
df.wide[[paste("question_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[1]]
df.wide[[paste("rating_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[2]]
df.wide[[paste("throw_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[4]]
df.wide[[paste("grass_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[6]]
df.wide[[paste("distance_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[8]]
df.wide[[paste("wall_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[10]]
}
df.wide$feedback[i] = a$questiondata$feedback
}
df.long = wideToLong(subset(df.wide,select=-feedback),within="trial")
#create factors
df.long = mutate(df.long, question = as.factor(question),
throw = factor(throw,levels=c("low","high")),
grass = factor(grass,levels=c("low","high")),
distance = factor(distance,levels=c("short","long")),
wall = factor(wall,levels=c("no","yes")),
gender = factor(gender,levels=c("female","male","NA")),
age = as.numeric(age))
df.long = df.long[order(df.long$participant,df.long$question),]
install.packages(c("lsr", "dplyr", "RSQLite"))
# Packages ----------------------------------------------------------------
rm(list=ls())
library(lsr)
library(dplyr)
library(rjson)
library(RSQLite)
# Read data ---------------------------------------------------------------
con = dbConnect(SQLite(),dbname = "participants.db");
df.complete = dbReadTable(con,"almost") #change the name of the database here (mine was called "almost")
dbDisconnect(con)
#filter out incompletes
df.complete = subset(df.complete,status %in% c(3,4))
#save data of different experiments in separate data frames
df.complete.experiment_1 = subset(df.complete,codeversion == "experiment_1")
df.complete.experiment_2 = subset(df.complete,codeversion == "experiment_2")
df.complete.experiment_3 = subset(df.complete,codeversion == "experiment_3")
# EXP1: Structure data ----------------------------------------------------------
df.wide = data.frame(matrix(nrow=nrow(df.complete.experiment_1),ncol=8))
colnames(df.wide) = c("experiment","participant","id","gender","age","condition","counterbalance","feedback")
for (i in 1:nrow(df.wide)){
a = fromJSON(df.complete.experiment_1$datastring[i])
df.wide$experiment[i] = df.complete.experiment_1$codeversion[i]
df.wide$participant[i] = i
df.wide$id[i] = a$workerId
if (is.null(a$questiondata$gender)){df.wide$gender[i] = NA
}else{
df.wide$gender[i] = a$questiondata$gender
}
df.wide$age[i] = a$questiondata$age
df.wide$condition[i] = a$condition
df.wide$counterbalance[i] = a$counterbalance
#cycles through the trials
for (j in 1:8){
df.wide[[paste("question_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[1]]
df.wide[[paste("rating_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[2]]
df.wide[[paste("throw_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[4]]
df.wide[[paste("grass_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[6]]
df.wide[[paste("distance_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[8]]
df.wide[[paste("wall_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[10]]
}
df.wide$feedback[i] = a$questiondata$feedback
}
df.long = wideToLong(subset(df.wide,select=-feedback),within="trial")
#create factors
df.long = mutate(df.long, question = as.factor(question),
throw = factor(throw,levels=c("low","high")),
grass = factor(grass,levels=c("low","high")),
distance = factor(distance,levels=c("short","long")),
wall = factor(wall,levels=c("no","yes")),
gender = factor(gender,levels=c("female","male","NA")),
age = as.numeric(age))
df.long = df.long[order(df.long$participant,df.long$question),]
# Packages ----------------------------------------------------------------
rm(list=ls())
library(lsr)
library(dplyr)
library(rjson)
library(RSQLite)
# Read data ---------------------------------------------------------------
con = dbConnect(SQLite(),dbname = "participants.db");
df.complete = dbReadTable(con,"almost") #change the name of the database here (mine was called "almost")
dbDisconnect(con)
#filter out incompletes
df.complete = subset(df.complete,status %in% c(3,4))
#save data of different experiments in separate data frames
df.complete.experiment_1 = subset(df.complete,codeversion == "experiment_1")
df.complete.experiment_2 = subset(df.complete,codeversion == "experiment_2")
df.complete.experiment_3 = subset(df.complete,codeversion == "experiment_3")
# EXP1: Structure data ----------------------------------------------------------
df.wide = data.frame(matrix(nrow=nrow(df.complete.experiment_1),ncol=8))
colnames(df.wide) = c("experiment","participant","id","gender","age","condition","counterbalance","feedback")
for (i in 1:nrow(df.wide)){
a = fromJSON(df.complete.experiment_1$datastring[i])
df.wide$experiment[i] = df.complete.experiment_1$codeversion[i]
df.wide$participant[i] = i
df.wide$id[i] = a$workerId
if (is.null(a$questiondata$gender)){df.wide$gender[i] = NA
}else{
df.wide$gender[i] = a$questiondata$gender
}
df.wide$age[i] = a$questiondata$age
df.wide$condition[i] = a$condition
df.wide$counterbalance[i] = a$counterbalance
#cycles through the trials
for (j in 1:8){
df.wide[[paste("question_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[1]]
df.wide[[paste("rating_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[2]]
df.wide[[paste("throw_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[4]]
df.wide[[paste("grass_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[6]]
df.wide[[paste("distance_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[8]]
df.wide[[paste("wall_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[10]]
}
df.wide$feedback[i] = a$questiondata$feedback
}
df.long = wideToLong(subset(df.wide,select=-feedback),within="trial")
#create factors
df.long = mutate(df.long, question = as.factor(question),
throw = factor(throw,levels=c("low","high")),
grass = factor(grass,levels=c("low","high")),
distance = factor(distance,levels=c("short","long")),
wall = factor(wall,levels=c("no","yes")),
gender = factor(gender,levels=c("female","male","NA")),
age = as.numeric(age))
df.long = df.long[order(df.long$participant,df.long$question),]
library(dplyr)
install.packages("dplyr")
library(plyr)
# Packages ----------------------------------------------------------------
rm(list=ls())
library(lsr)
library(dplyr)
library(rjson)
library(RSQLite)
# Read data ---------------------------------------------------------------
con = dbConnect(SQLite(),dbname = "participants.db");
df.complete = dbReadTable(con,"almost") #change the name of the database here (mine was called "almost")
dbDisconnect(con)
#filter out incompletes
df.complete = subset(df.complete,status %in% c(3,4))
#save data of different experiments in separate data frames
df.complete.experiment_1 = subset(df.complete,codeversion == "experiment_1")
df.complete.experiment_2 = subset(df.complete,codeversion == "experiment_2")
df.complete.experiment_3 = subset(df.complete,codeversion == "experiment_3")
# EXP1: Structure data ----------------------------------------------------------
df.wide = data.frame(matrix(nrow=nrow(df.complete.experiment_1),ncol=8))
colnames(df.wide) = c("experiment","participant","id","gender","age","condition","counterbalance","feedback")
for (i in 1:nrow(df.wide)){
a = fromJSON(df.complete.experiment_1$datastring[i])
df.wide$experiment[i] = df.complete.experiment_1$codeversion[i]
df.wide$participant[i] = i
df.wide$id[i] = a$workerId
if (is.null(a$questiondata$gender)){df.wide$gender[i] = NA
}else{
df.wide$gender[i] = a$questiondata$gender
}
df.wide$age[i] = a$questiondata$age
df.wide$condition[i] = a$condition
df.wide$counterbalance[i] = a$counterbalance
#cycles through the trials
for (j in 1:8){
df.wide[[paste("question_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[1]]
df.wide[[paste("rating_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[2]]
df.wide[[paste("throw_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[4]]
df.wide[[paste("grass_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[6]]
df.wide[[paste("distance_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[8]]
df.wide[[paste("wall_",j-1,sep="")]][i] =
a$data[[j]]$trialdata[[10]]
}
df.wide$feedback[i] = a$questiondata$feedback
}
df.long = wideToLong(subset(df.wide,select=-feedback),within="trial")
#create factors
df.long = mutate(df.long, question = as.factor(question),
throw = factor(throw,levels=c("low","high")),
grass = factor(grass,levels=c("low","high")),
distance = factor(distance,levels=c("short","long")),
wall = factor(wall,levels=c("no","yes")),
gender = factor(gender,levels=c("female","male","NA")),
age = as.numeric(age))
df.long = df.long[order(df.long$participant,df.long$question),]
library(lsr)
foo <- c(3,12,10,5)
dim(foo) <-c(2,2)
foo
foo <- c(3,12,7,10,5,6)
dim(foo) <-c(3,2)
foo
fisher.test(foo)
foo <- c(10,20,1,20)
dim(foo) <- c(2,2)
foo
chisq.test(foo)
fisher.test(foo)
installed.packages()
binomial.test([1 1 0 0 0 ], 0.5)
binomial.test(c(1 1 0 0 0 ), 0.5)
foo = c(1,2,2,2)
foo = c(0,1,1,1,1)
binomial.test(foo, 0.5)
binom.test(foo, 0.5)
binom.test(1,20,0)
binom.test(1,2000,0)
binom.test(1,2000,0.1)
binom.test(1,2000,0.5)
binom.test(1000,2000,0.5)
binom.test(1,2000,0, alternative="greater")
# This file is going to have the full analysis pipeline for the MannerPath studies!
#It will pull data from the main MPP_Participants.csv and from the trial data
#(Repo/MPP Presentation/Data) from each child.
#To start, I'm bringing over the data cleaning (for E1 circa 1/20) Annelot did)
#And also analyses conducted around 2/3 which I'll update from here
#set directories; might need to change this on your comp!
repodir = "/Users/mekline/Dropbox/_Projects/PrimingMannerPath/MannerPathPriming/"
adir = paste(repodir, "Analysis/", sep="")
ddir = paste(repodir, "MPP Presentation Stimuli and Trial Data/Data/" , sep="")
setwd(repodir)
#name of info file
nameMetaFile = paste(repodir,"MannerPath_Data.csv",sep="")
#START HERE
#get all .dat files in the directory
files = list.files(ddir, pattern = ".dat$")
#create an empty error vector
error_files = c()
#counter to count at which row in the data frame we are
counter = 1
#generate an empty data frame for output
output = data.frame(EXPERIMENT = '', TRIAL = '',BIAS = '',TEST = '', SUBNUM = '', DAYSOLD = '', AGEYEARS = '', INCDECISION = '', stringsAsFactors=F)
#load the info data file
meta = read.csv(nameMetaFile, sep = ",", header = T)
names(meta)
#loop over files (participants) and the rows in the file
for (file in files)
{
#read in the file
data = read.table(file, sep = ",", header = T)
#test if there is data in that file, else place in the error vector
if (length(data[,1]) > 0)
{
#get info for current participant
info = meta[meta$Participant.. == data$SubjectNo[1],]
for (row in 1:length(data[,1]))
{
#store experiment and trialnumber
output[counter,1] = toString(data$Experiment[row])
output[counter,2] = data$trialNo[row]
#transform variables into BIAS and TEST
if (data$mannerSideBias[row] == "L" & data$kidResponseBias[row] == "z") output[counter,3] = "MANNERBIAS"
if (data$pathSideBias[row] == "R" & data$kidResponseBias[row] == "c") output[counter,3] = "PATHBIAS"
if (data$mannerSideBias[row] == "R" & data$kidResponseBias[row] == "c") output[counter,3] = "MANNERBIAS"
if (data$pathSideBias[row] == "L" & data$kidResponseBias[row] == "z") output[counter,3] = "PATHBIAS"
if (data$mannerSideTest[row] == "L" & data$kidResponseTest[row] == "z") output[counter,4] = "MANNERBIAS"
if (data$pathSideTest[row] == "R" & data$kidResponseTest[row] == "c") output[counter,4] = "PATHBIAS"
if (data$mannerSideTest[row] == "R" & data$kidResponseTest[row] == "c") output[counter,4] = "MANNERBIAS"
if (data$pathSideTest[row] == "L" & data$kidResponseTest[row] == "z") output[counter,4] = "PATHBIAS"
#Store subject number, days old, age in years and inclusion criteria
output[counter,5] = data$SubjectNo[row]
output[counter,6] = info$Days.Old
output[counter,7] = info$Age.Years
output[counter,8] = info$Inclusion.Decision
#next row
counter = counter + 1
}
}
else
{append(error_files, file)}
}
setwd(ddir)
for (file in files)
{
#read in the file
data = read.table(file, sep = ",", header = T)
#test if there is data in that file, else place in the error vector
if (length(data[,1]) > 0)
{
#get info for current participant
info = meta[meta$Participant.. == data$SubjectNo[1],]
for (row in 1:length(data[,1]))
{
#store experiment and trialnumber
output[counter,1] = toString(data$Experiment[row])
output[counter,2] = data$trialNo[row]
#transform variables into BIAS and TEST
if (data$mannerSideBias[row] == "L" & data$kidResponseBias[row] == "z") output[counter,3] = "MANNERBIAS"
if (data$pathSideBias[row] == "R" & data$kidResponseBias[row] == "c") output[counter,3] = "PATHBIAS"
if (data$mannerSideBias[row] == "R" & data$kidResponseBias[row] == "c") output[counter,3] = "MANNERBIAS"
if (data$pathSideBias[row] == "L" & data$kidResponseBias[row] == "z") output[counter,3] = "PATHBIAS"
if (data$mannerSideTest[row] == "L" & data$kidResponseTest[row] == "z") output[counter,4] = "MANNERBIAS"
if (data$pathSideTest[row] == "R" & data$kidResponseTest[row] == "c") output[counter,4] = "PATHBIAS"
if (data$mannerSideTest[row] == "R" & data$kidResponseTest[row] == "c") output[counter,4] = "MANNERBIAS"
if (data$pathSideTest[row] == "L" & data$kidResponseTest[row] == "z") output[counter,4] = "PATHBIAS"
#Store subject number, days old, age in years and inclusion criteria
output[counter,5] = data$SubjectNo[row]
output[counter,6] = info$Days.Old
output[counter,7] = info$Age.Years
output[counter,8] = info$Inclusion.Decision
#next row
counter = counter + 1
}
}
else
{append(error_files, file)}
}
meta
names(meta)
names(output)
output
output
data
