setwd(ddir)
allData <- data.frame(NULL)
trialData <- data.frame(NULL)
pData <- data.frame(NULL)
error_files = list() #create an empty error list
for (file in files) {
trialData <- try(read.table(file, sep = ",", header = T, fill=T))
if (class(trialData) == 'try-error') {
cat('Caught an error during read.table.\n')
cat(file)
} else {
pData = try(participantData[participantData$Participant.. == trialData$SubjectNo[1],]) #get info for current participant
pData$SubjectNo = pData$Participant..
if(length(pData$Age.Years) > 0){
if (!is.na(pData$Age.Years)){ #(This only happens for a NA line where a subj number was skipped)
myData = left_join(trialData, pData, by="SubjectNo") #Build rows
cat(pData$SubjectNo)
cat('\n')
myData$trainingEndTime <- as.numeric(myData$trainingEndTime)
myData$finalTestStart <- as.numeric(myData$finalTestStart)
myData$finalTestEnd <- as.numeric(myData$finalTestEnd)
allData <- bind_rows(myData, allData) #Add these rows to the giant data frame
}
}
}
}
length(unique(allData$SubjectNo))
unique(allData$SubjectNo)
#It's a great big data frame! Begin by dropping columns that we don't need for analysis (mostly names of individual vid files)
colToSave = c("SubjectNo","VerbDomain","trialNo","itemID",
"verbName","mannerSideBias","pathSideBias",
"kidResponseBias","mannerSideTest","pathSideTest",
"kidResponseTest","Experiment","Verb.Condition",
"Gender","Days.Old",
"Age.Years","Age.Months","Inclusion.Decision",
"Exclude.Reason","Experiment.Group",
"Experiment.x","Experiment.y","Condition",
"extAnswer","extVerbName",
"extMannerSide","extPathSide")
#Recode variable names
allData$RealExp <- ''
allData$Experiment <- as.character(allData$Experiment)
allData$Experiment.y <- as.character(allData$Experiment.y)
allData <- allData  %>%
select(one_of(colToSave)) %>%
mutate(RealExp = ifelse(is.na(Experiment),Experiment.y,Experiment)) %>% #'Experiment' and 'Condition' were used inconsistently early on but can be derived from levels used
select(-c(VerbDomain, Experiment, Experiment.Group, Experiment.y, Experiment.x, Condition)) %>%
rename(Experiment = RealExp) %>%
rename(Condition = Verb.Condition)
length(unique(allData$SubjectNo))
allData1 <- allData %>% #A few participants had the extension trials coded on the same lines as trials 1-8, just have to rearrange them
filter(is.na(extAnswer))
allData2 <- allData %>%
filter(!is.na(extAnswer))
#this could all be a gather probably, but it aint working
allDataBase <- select(allData2, -c(extAnswer, extVerbName, extMannerSide, extPathSide))
allDataExtend <- select(allData2, -c(itemID,verbName,mannerSideBias,pathSideBias,kidResponseBias,mannerSideTest,pathSideTest,kidResponseTest))
allDataExtend <- allDataExtend %>%
mutate(trialNo = trialNo + 8) %>%
rename(verbName = extVerbName)  %>%
rename(mannerSideBias = extMannerSide) %>%
rename(pathSideBias = extPathSide) %>%
rename(kidResponseBias = extAnswer)
allDataExtend$itemID = 'get it from verbname'
allDataExtend$mannerSideTest = 'undefined'
allDataExtend$pathSideTest = 'undefined'
allDataExtend$kidResponseTest = 'undefined'
allData <- select(allData1, -c(extAnswer, extVerbName, extMannerSide, extPathSide)) %>% #re-adding the normal ones
rbind(allDataBase) %>% #add base, then ext. trials of the weirdos
rbind(allDataExtend) %>%
arrange(SubjectNo) %>%
select(Experiment,Condition,SubjectNo,trialNo,itemID,verbName, mannerSideBias:Exclude.Reason) #just reordering
length(unique(allData$SubjectNo))
#rm(list=setdiff(ls(), c("allData","adir","ddir","repodir")))#avoid accidentally referencing placeholder vars from above
allData <- allData %>%
filter(!is.na(Inclusion.Decision)) %>%
filter(Inclusion.Decision == 1) %>% #TODO: Eventually do this above and report stats!
select(-c(Inclusion.Decision, Exclude.Reason))
length(unique(allData$SubjectNo))
#TODO: Probably a good idea to print out a sanitized csv here for people who don't want to run the data cleaning....
#TODO: Checks for effects of side bias go here
allData <- allData %>% #Translate kid choice variables to objective 'choseM' for Bias (main) & Test (sanity check - did they learn the verb)
filter(kidResponseBias == 'z' | kidResponseBias == 'c') %>% #remove trials w/ no answer on critical Bias q
mutate(choseM.Bias = ifelse((mannerSideBias == "L" & kidResponseBias == "z")|
(mannerSideBias == "R" & kidResponseBias == "c"), 1, 0)) %>%
mutate(choseM.Test = ifelse((mannerSideTest == "L" & kidResponseTest == "z")|
(mannerSideTest == "R" & kidResponseTest == "c"), 1, 0)) %>%
mutate(expPhase = ifelse(trialNo>8,"Extension","Base")) #Mark trials 1-8 and 9-16
######
#IMPORTANT!
######
allData <- filter(allData, trialNo>1) #Trial #1 Bias test is pre-training!!
#Drop pilot study!
allData <- filter(allData, Experiment !="E1 - MannerPath")
######
# GRAPHS
######
makePlot = function(ydata, ylab="proportion chosing Manner/Action", title=""){
plotData <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition,  ydata$trialNo), sum)
numObs <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$trialNo), length)
names(plotData) <- c("Condition", "trialNo", "choseManner")
plotData$numObs <- numObs$x
#get the binomial conf.intervals per condition per trial
for (cond in unique(plotData$Condition))
{
for (trial in unique(plotData[plotData$Condition == cond,]$trialNo))
{
x = plotData[plotData$Condition == cond & plotData$trialNo == trial,]$choseManner
n = plotData[plotData$Condition == cond & plotData$trialNo == trial,]$numObs
test = prop.test(x, n, conf.level=0.95)
plotData$intLower[plotData$Condition == cond & plotData$trialNo == trial] = test$conf.int[1]
plotData$intUpper[plotData$Condition == cond & plotData$trialNo == trial]  = test$conf.int[2]
plotData$theAvg[plotData$Condition == cond & plotData$trialNo == trial] = x/n
}
}
#print(plotData)
#make a plot with ggplot
pd <- position_dodge(0.1)
ggplot(plotData, aes(x=trialNo, y=theAvg, colour=Condition, group=Condition, ymax = 1)) +
geom_errorbar(aes(ymin=intLower, ymax=intUpper), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
ylab(ylab) +
geom_point(position=pd, size=3) +
coord_cartesian(ylim=c(0,1)) +
ggtitle(title)
#scale_colour_manual(values = c("green","red"),
#name="",
#labels=c("Manner", "Path")) +
}
makePlot(filter(allData, Condition == "Manner" | Condition == "Path"))
makeBar = function(ydata, ylab="proportion chosing Manner/Action", title="") {
plotData <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$expPhase), sum)
numObs <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$expPhase), length)
names(plotData) <- c("Condition", "Phase", "choseManner")
plotData$numObs <- numObs$x
print(plotData)
for (cond in unique(plotData$Condition)){
for (ph in unique(plotData$Phase)){
x = plotData[plotData$Condition == cond & plotData$Phase == ph,]$choseManner
n = plotData[plotData$Condition == cond & plotData$Phase == ph,]$numObs
test = prop.test(x, n, conf.level=0.95)
plotData$intLower[plotData$Condition == cond & plotData$Phase == ph] = test$conf.int[1]
plotData$intUpper[plotData$Condition == cond & plotData$Phase == ph]  = test$conf.int[2]
plotData$theAvg[plotData$Condition == cond & plotData$Phase == ph] = x/n
}
}
ggplot(plotData, aes(x=Phase, y=theAvg, fill=Condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=intLower, ymax=intUpper), colour="black", width=.1, position=position_dodge(.9)) + #Why point 9? Hell if I know!
geom_point(size = 3, alpha = 0.3, position = position_jitter(width = 0.3, height = 0.1)) +
coord_cartesian(ylim=c(0,1))+
ylab(ylab)+
xlab('')+
theme_bw()+
#scale_colour_manual(values = c("green","red")) +
#scale_fill_brewer(palette=colors) +
ggtitle(title)
}
makeBar(filter(allData, Condition == "Manner" | Condition == "Path"))
##Make a version of the tabular data we can print out for quicky graphs elsewhere...
plotData <- aggregate(allData$choseM.Bias, by=list(allData$Condition, allData$expPhase), sum)
numObs <- aggregate(allData$choseM.Bias, by=list(allData$Condition, allData$expPhase), length)
names(plotData) <- c("Condition", "Phase", "choseManner")
plotData$numObs <- numObs$x
for (cond in unique(plotData$Condition)){
for (ph in unique(plotData$Phase)){
x = plotData[plotData$Condition == cond & plotData$Phase == ph,]$choseManner
n = plotData[plotData$Condition == cond & plotData$Phase == ph,]$numObs
test = prop.test(x, n, conf.level=0.95)
plotData$intLower[plotData$Condition == cond & plotData$Phase == ph] = test$conf.int[1]
plotData$intUpper[plotData$Condition == cond & plotData$Phase == ph]  = test$conf.int[2]
plotData$theAvg[plotData$Condition == cond & plotData$Phase == ph] = x/n
}
}
print(plotData)
makeBar(filter(allData, Condition == "Action" | Condition == "Effect"))
#How many S's included? Collapse to 'chose manner' score rather than individual trial responses - notice for 'extend' this collapses the 2 experiment phases, DON"T use these for stats, jsut S level info :)
scoreData <- aggregate(allData$choseM.Bias, by=list(allData$Condition, allData$Age.Years, allData$Gender, allData$SubjectNo), sum)
names(scoreData) <- c("Condition", "Years", "Gender", "SubNo", "choseMScore")
table(scoreData$Years, scoreData$Gender, scoreData$Condition)
table(scoreData$Condition)
#Note first Bias trial was removed above; it tells us nothing, no evidence has been seen yet!
Exp1 <- filter(allData, Experiment == "E1 - MannerPath")
Exp2.Base <- filter(allData, Experiment == "E2 - ActionEffect extend to MannerPath" & expPhase == "Base")
Exp2.Extend <- filter(allData, Experiment == "E2 - ActionEffect extend to MannerPath" & expPhase == "Extension")
#Test 1: Does CONDITION matter? (Random effects for verbs; Condition is between-subjects)
#Exp1
model_eff <- glmer(choseM.Bias ~ Condition  + (1|verbName), data=Exp1, family="binomial")
model_noeff <- glmer(choseM.Bias ~ 1  + (1|verbName), data=Exp1, family="binomial")
anova(model_eff, model_noeff)
#Exp2 base
model_eff2 <- glmer(choseM.Bias ~ Condition  + (1|verbName), data=Exp2.Base, family="binomial")
model_noeff2 <- glmer(choseM.Bias ~ 1  + (1|verbName), data=Exp2.Base, family="binomial")
anova(model_eff2, model_noeff2)
#Exp2 Extension
model_eff3 <- glmer(choseM.Bias ~ Condition  + (1|verbName), data=Exp2.Extend, family="binomial")
model_noeff3 <- glmer(choseM.Bias ~ 1  + (1|verbName), data=Exp2.Extend, family="binomial")
anova(model_eff3, model_noeff3)
unique(allData$Experiment)
Exp3.Base <- filter(allData, Experiment == "E3 - MannerPath extend to ActionEffect" & expPhase == "Base")
Exp3.Extend <- filter(allData, Experiment == "E3 - MannerPath extend to ActionEffect" & expPhase == "Extension")
model_eff4 <- glmer(choseM.Bias ~ Condition  + (1|verbName), data=Exp3.Base, family="binomial")
model_noeff4 <- glmer(choseM.Bias ~ 1  + (1|verbName), data=Exp3.Base, family="binomial")
anova(model_eff4, model_noeff4)
#Exp3 Extension
model_eff5 <- glmer(choseM.Bias ~ Condition  + (1|verbName), data=Exp3.Extend, family="binomial")
model_noeff5 <- glmer(choseM.Bias ~ 1  + (1|verbName), data=Exp3.Extend, family="binomial")
anova(model_eff5, model_noeff5)
model_inter2 <- glmer(choseM.Bias ~ Condition*trialNo + (1|verbName), data=Exp2.Base, family="binomial")
model_nointer2 <- glmer(choseM.Bias ~ Condition+trialNo + (1|verbName), data=Exp2.Base, family="binomial")
model_tonly2 <- glmer(choseM.Bias ~ trialNo + (1|verbName), data=Exp2.Base, family="binomial")
anova(model_inter2, model_nointer2)
#Exp3 Extension
model_eff5 <- glmer(choseM.Bias ~ Condition  + (1|verbName), data=Exp3.Extend, family="binomial")
model_noeff5 <- glmer(choseM.Bias ~ 1  + (1|verbName), data=Exp3.Extend, family="binomial")
anova(model_eff5, model_noeff5)
plotData
makePlot(filter(allData, Condition == "Manner" | Condition == "Path"))
makePlot(filter(allData, Condition == "Action" | Condition == "Effect"))
View(pData)
View(participantData)
library(RColorBrewer)
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("~/Dropbox/_Grants/NSF January 2017 Snedeker Kline - MPP/graphs for grant")
kidData <- read.csv('kiddata.csv')%>% #in summary form from the other graphs...
select(-KID)
adultData <- read.csv('3_BiasAndTestScored.csv') %>% #This is the data from Geojo domain-extension study #3
#drop soooo many columns
select(one_of(c("PayCode","SubNo", "trialNo","itemId","eventOrder","blockOrder","eventType", "condition", "block1","block2",
"verbName", "bias1RESP" ,
"bias2RESP" , "testV1Ans","test1RESP","testV2Ans","test2RESP","trialCount","trialCountBlock",
"bias1ACC","bias2ACC", "biasACC","test1ACC","test2ACC","testACC"))) %>%
arrange(SubNo, trialNo)
#Renaming to match kid data
adultData$expPhase <- ""
adultData[adultData$trialNo < 9,]$expPhase <- "Base"
adultData[adultData$trialNo > 8,]$expPhase <- "Extension"
personConds <- aggregate(adultData$condition, by=list(adultData$SubNo), FUN=head, 1)
names(personConds) <- c("SubNo","Condition")
personConds$Condition <- as.character(personConds$Condition)
personConds[personConds$Condition == "Means",]$Condition <- "Action"
adultData <- merge(adultData, personConds, by=c("SubNo"))
adultData$choseM.Bias <- 0 #Unlike kids, adult values can wind up being 0, 1 or 2
adultData$choseM.Bias <- adultData$biasACC * 2
# adultData[(adultData$Condition == "Action")|(adultData$Condition == "Manner"),]$choseM.Bias <-
#   adultData[(adultData$Condition == "Action")|(adultData$Condition == "Manner"),]$biasACC * 2
#
# adultData[(adultData$Condition == "Path")|(adultData$Condition == "Effect"),]$choseM.Bias <-
#   (adultData[(adultData$Condition == "Path")|(adultData$Condition == "Effect"),]$biasACC * -2) + 2
#Yay, the data is in comprehensible longform :) Time to condense it.
plotDataAdults <- aggregate(adultData$choseM.Bias, by=list(adultData$Condition, adultData$expPhase), sum)
numObs <- aggregate(adultData$choseM.Bias, by=list(adultData$Condition, adultData$expPhase), length)
names(plotDataAdults) <- c("Condition", "Phase", "choseManner")
plotDataAdults$numObs <- numObs$x * 2 #Again!!
for (cond in unique(plotDataAdults$Condition)){
for (ph in unique(plotDataAdults$Phase)){
x = plotDataAdults[plotDataAdults$Condition == cond & plotDataAdults$Phase == ph,]$choseManner
n = plotDataAdults[plotDataAdults$Condition == cond & plotDataAdults$Phase == ph,]$numObs
test = prop.test(x, n, conf.level=0.95)
plotDataAdults$intLower[plotDataAdults$Condition == cond & plotDataAdults$Phase == ph] = test$conf.int[1]
plotDataAdults$intUpper[plotDataAdults$Condition == cond & plotDataAdults$Phase == ph]  = test$conf.int[2]
plotDataAdults$theAvg[plotDataAdults$Condition == cond & plotDataAdults$Phase == ph] = x/n
}
}
plotDataAdults$Population <- "Adults"
kidData$Population <- "4-5 year olds"
plotData <- rbind(plotDataAdults, kidData)
plotData$Domain <- ""
plotData[(plotData$Condition == "Manner") | (plotData$Condition == "Path"),]$Domain <- "Motion verbs"
plotData[(plotData$Condition == "Action") | (plotData$Condition == "Effect"),]$Domain <- "Object-directed verbs"
plotData[(plotData$Condition == "Manner"),]$Condition <- "MoM"
plotData[(plotData$Condition == "Action"),]$Condition <- "MoA"
plotData$myN <- ""
plotData[(plotData$Domain == "Motion verbs") &
(plotData$Population == "Adults"),]$myN <- 'n=70'
plotData[(plotData$Domain == "Object-directed verbs") &
(plotData$Population == "Adults"),]$myN <- 'n=71'
plotData[(plotData$Domain == "Motion verbs") &
(plotData$Population == "4-5 year olds"),]$myN <- 'n=58'
plotData[(plotData$Domain == "Object-directed verbs") &
(plotData$Population == "4-5 year olds"),]$myN <- 'n=64'
#Factor ordering fun!
plotData$Domain <- factor(plotData$Domain, levels = c("Object-directed verbs", "Motion verbs"))
plotData$Population <- factor(plotData$Population, levels = c("Adults", "4-5 year olds"))
plotData$Condition <- factor(plotData$Condition, levels = c("MoA", "Effect","MoM","Path"))
#Aesthetics
my.reds <- brewer.pal(9, "Reds")
my.blues <- brewer.pal(9, "Blues")
my.cols <- c(my.reds[6], my.reds[4], my.blues[6], my.blues[4])
#Let's make the worlds biggest graph.
ggplot(plotData, aes(x=Phase, y=theAvg, fill=Condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=intLower, ymax=intUpper), colour="black", width=.1, position=position_dodge(.9)) + #Why point 9? Hell if I know!
facet_grid(. ~ Domain * Population * myN) +
coord_cartesian(ylim=c(0,1))+
ylab('Proportion of MANNER choices')+
xlab('')+
theme_bw()+
scale_fill_manual(values=my.cols) +
ggtitle('') +
theme(legend.title=element_blank()) +
theme(strip.background=element_blank())+
theme(text=element_text(size=15))
# This file is going to have the full analysis pipeline for the MannerPath studies!
#It will pull data from the main MannerPath_Data.csv and from the trial data
#(Repo/MPP_Stim_and_Data/Data) from each child. There are (currently) two different
#experiments/conditions in the dataset:
#
# MannerPath - the original version (MP learning/bias), with no extension version
# ActionEffect+Extend - AE learning/bias, followed by MP trials which have only bias phase
# Just for super awesome fun times, subjects before #77 in AE-Extend have a variety of
# slightly different matlab outputs, and some of them only have AE data but no extension.
# Hence data cleaning/reformatting is...a bit messy.
#
# See #TODO for unfinished places
# See line 140ish for analysis
######
# LIBRARIES, FILES, DIRECTORIES
######
library(dplyr)
library(tidyr)
library(ggplot2)
library(lme4)
library(pwr)
rm(list=ls()) #Clear any lingering variables
#Set directories; might need to change this on your computer!
#repodir = "C:/Users/Anna/Documents/GitHub/MannerPathPriming/"
repodir = "/Users/mekline/Dropbox/_Projects/PrimingMannerPath/MannerPathPriming/"
#repodir = "/Users/rebeccajarvis/Documents/MannerPathPriming/"
adir = paste(repodir, "Analysis/", sep="")
ddir = paste(repodir, "MPP_Stim_and_Data/Data/" , sep="")
setwd(repodir)
pFile = paste(repodir,"MannerPath_Data.csv",sep="") #get files ready...
files = list.files(ddir, pattern = ".dat$") #all .dat files in data directory
participantData = read.csv(pFile, sep = ",", header = T) #load the info data file
######
# INCLUSION INFO
######
#TODO: Do inclusion/exclusion of participants up here, with calculations for type of exclusion
#Print nice summary of subject numbers, ages, gender splits up here
######
# DATA CLEANING
######
#loop over files (participants) and the rows in the file
#For now, just read in all lines of every data file. Assert that all have the same columns
#names at the start, but some may have extra columns if they have extension data. Later on we'll
#clean up and reshape to get nicer formatted data.
#Notes:
# - No .dat files for 1,2, 35, 42, 69 (1-2 pilot, 35-69 kids who consented/are on camera
# but didn't get to the exp)
#
# - Lots of errors are printed anytime we hit a badly formatted .dat file
setwd(ddir)
allData <- data.frame(NULL)
trialData <- data.frame(NULL)
pData <- data.frame(NULL)
error_files = list() #create an empty error list
for (file in files) {
trialData <- try(read.table(file, sep = ",", header = T, fill=T))
if (class(trialData) == 'try-error') {
cat('Caught an error during read.table.\n')
cat(file)
} else {
pData = try(participantData[participantData$Participant.. == trialData$SubjectNo[1],]) #get info for current participant
pData$SubjectNo = pData$Participant..
if(length(pData$Age.Years) > 0){
if (!is.na(pData$Age.Years)){ #(This only happens for a NA line where a subj number was skipped)
myData = left_join(trialData, pData, by="SubjectNo") #Build rows
cat(pData$SubjectNo)
cat('\n')
myData$trainingEndTime <- as.numeric(myData$trainingEndTime)
myData$finalTestStart <- as.numeric(myData$finalTestStart)
myData$finalTestEnd <- as.numeric(myData$finalTestEnd)
allData <- bind_rows(myData, allData) #Add these rows to the giant data frame
}
}
}
}
length(unique(allData$SubjectNo))
allData$Inclusion.Decision
#It's a great big data frame! Begin by dropping columns that we don't need for analysis (mostly names of individual vid files)
colToSave = c("SubjectNo","VerbDomain","trialNo","itemID",
"verbName","mannerSideBias","pathSideBias",
"kidResponseBias","mannerSideTest","pathSideTest",
"kidResponseTest","Experiment","Verb.Condition",
"Gender","Days.Old",
"Age.Years","Age.Months","Inclusion.Decision",
"Exclude.Reason","Experiment.Group",
"Experiment.x","Experiment.y","Condition",
"extAnswer","extVerbName",
"extMannerSide","extPathSide")
#Recode variable names
allData$RealExp <- ''
allData$Experiment <- as.character(allData$Experiment)
allData$Experiment.y <- as.character(allData$Experiment.y)
allData <- allData  %>%
select(one_of(colToSave)) %>%
mutate(RealExp = ifelse(is.na(Experiment),Experiment.y,Experiment)) %>% #'Experiment' and 'Condition' were used inconsistently early on but can be derived from levels used
select(-c(VerbDomain, Experiment, Experiment.Group, Experiment.y, Experiment.x, Condition)) %>%
rename(Experiment = RealExp) %>%
rename(Condition = Verb.Condition)
length(unique(allData$SubjectNo))
allData1 <- allData %>% #A few participants had the extension trials coded on the same lines as trials 1-8, just have to rearrange them
filter(is.na(extAnswer))
allData2 <- allData %>%
filter(!is.na(extAnswer))
#this could all be a gather probably, but it aint working
allDataBase <- select(allData2, -c(extAnswer, extVerbName, extMannerSide, extPathSide))
allDataExtend <- select(allData2, -c(itemID,verbName,mannerSideBias,pathSideBias,kidResponseBias,mannerSideTest,pathSideTest,kidResponseTest))
allDataExtend <- allDataExtend %>%
mutate(trialNo = trialNo + 8) %>%
rename(verbName = extVerbName)  %>%
rename(mannerSideBias = extMannerSide) %>%
rename(pathSideBias = extPathSide) %>%
rename(kidResponseBias = extAnswer)
allDataExtend$itemID = 'get it from verbname'
allDataExtend$mannerSideTest = 'undefined'
allDataExtend$pathSideTest = 'undefined'
allDataExtend$kidResponseTest = 'undefined'
allData <- select(allData1, -c(extAnswer, extVerbName, extMannerSide, extPathSide)) %>% #re-adding the normal ones
rbind(allDataBase) %>% #add base, then ext. trials of the weirdos
rbind(allDataExtend) %>%
arrange(SubjectNo) %>%
select(Experiment,Condition,SubjectNo,trialNo,itemID,verbName, mannerSideBias:Exclude.Reason) #just reordering
length(unique(allData$SubjectNo))
#rm(list=setdiff(ls(), c("allData","adir","ddir","repodir")))#avoid accidentally referencing placeholder vars from above
allData <- allData %>%
filter(!is.na(Inclusion.Decision)) %>%
filter(Inclusion.Decision == 1) %>% #TODO: Eventually do this above and report stats!
select(-c(Inclusion.Decision, Exclude.Reason))
length(unique(allData$SubjectNo))
#####
# Eventually add 75, 76 (they had to be coded by hand and aren't in dat format yet)
#####
######
# DATA RESHAPE FOR ANALYSIS & GRAPHS
######
#TODO: Probably a good idea to print out a sanitized csv here for people who don't want to run the data cleaning....
#TODO: Checks for effects of side bias go here
allData <- allData %>% #Translate kid choice variables to objective 'choseM' for Bias (main) & Test (sanity check - did they learn the verb)
filter(kidResponseBias == 'z' | kidResponseBias == 'c') %>% #remove trials w/ no answer on critical Bias q
mutate(choseM.Bias = ifelse((mannerSideBias == "L" & kidResponseBias == "z")|
(mannerSideBias == "R" & kidResponseBias == "c"), 1, 0)) %>%
mutate(choseM.Test = ifelse((mannerSideTest == "L" & kidResponseTest == "z")|
(mannerSideTest == "R" & kidResponseTest == "c"), 1, 0)) %>%
mutate(expPhase = ifelse(trialNo>8,"Extension","Base")) #Mark trials 1-8 and 9-16
######
#IMPORTANT!
######
allData <- filter(allData, trialNo>1) #Trial #1 Bias test is pre-training!!
#Drop pilot study!
allData <- filter(allData, Experiment !="E1 - MannerPath")
makeBar = function(ydata, ylab="proportion chosing Manner/Action", title="") {
plotData <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$expPhase), sum)
numObs <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$expPhase), length)
names(plotData) <- c("Condition", "Phase", "choseManner")
plotData$numObs <- numObs$x
print(plotData)
for (cond in unique(plotData$Condition)){
for (ph in unique(plotData$Phase)){
x = plotData[plotData$Condition == cond & plotData$Phase == ph,]$choseManner
n = plotData[plotData$Condition == cond & plotData$Phase == ph,]$numObs
test = prop.test(x, n, conf.level=0.95)
plotData$intLower[plotData$Condition == cond & plotData$Phase == ph] = test$conf.int[1]
plotData$intUpper[plotData$Condition == cond & plotData$Phase == ph]  = test$conf.int[2]
plotData$theAvg[plotData$Condition == cond & plotData$Phase == ph] = x/n
}
}
ggplot(aes(x=Phase, y=theAvg, fill=Condition)) +
geom_bar(data=plotData, position=position_dodge(), stat="identity") +
geom_errorbar(data=plotData, aes(ymin=intLower, ymax=intUpper), colour="black", width=.1, position=position_dodge(.9)) + #Why point 9? Hell if I know!
#geom_point(size = 3, alpha = 0.3, position = position_jitter(width = 0.3, height = 0.1)) +
coord_cartesian(ylim=c(0,1))+
ylab(ylab)+
xlab('')+
theme_bw()+
#scale_colour_manual(values = c("green","red")) +
#scale_fill_brewer(palette=colors) +
ggtitle(title)
}
makeBar(filter(allData, Condition == "Manner" | Condition == "Path"))
makeBar = function(ydata, ylab="proportion chosing Manner/Action", title="") {
plotData <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$expPhase), sum)
numObs <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$expPhase), length)
names(plotData) <- c("Condition", "Phase", "choseManner")
plotData$numObs <- numObs$x
for (cond in unique(plotData$Condition)){
for (ph in unique(plotData$Phase)){
x = plotData[plotData$Condition == cond & plotData$Phase == ph,]$choseManner
n = plotData[plotData$Condition == cond & plotData$Phase == ph,]$numObs
test = prop.test(x, n, conf.level=0.95)
plotData$intLower[plotData$Condition == cond & plotData$Phase == ph] = test$conf.int[1]
plotData$intUpper[plotData$Condition == cond & plotData$Phase == ph]  = test$conf.int[2]
plotData$theAvg[plotData$Condition == cond & plotData$Phase == ph] = x/n
}
}
ggplot(plotData, aes(x=Phase, y=theAvg, fill=Condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=intLower, ymax=intUpper), colour="black", width=.1, position=position_dodge(.9)) + #Why point 9? Hell if I know!
#geom_point(size = 3, alpha = 0.3, position = position_jitter(width = 0.3, height = 0.1)) +
coord_cartesian(ylim=c(0,1))+
ylab(ylab)+
xlab('')+
theme_bw()+
#scale_colour_manual(values = c("green","red")) +
#scale_fill_brewer(palette=colors) +
ggtitle(title)
}
makeBar(filter(allData, Condition == "Manner" | Condition == "Path"))
help(geom_point)
