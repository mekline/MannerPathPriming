library(dplyr)
library(tidyr)
library(ggplot2)
library(lme4)
library(pwr)
rm(list=ls())
repodir = "C:/Users/Anna/Documents/GitHub/MannerPathPriming/"
adir = paste(repodir, "Analysis/", sep="")
ddir = paste(repodir, "MPP_Stim_and_Data/Data/" , sep="")
setwd(repodir)
pFile = paste(repodir,"MannerPath_Data.csv",sep="")
files = list.files(ddir, pattern = ".dat$")
error_files = list()
participantData = read.csv(pFile, sep = ",", header = T)
setwd(ddir)
allData <- data.frame(NULL)
for (file in files) {
isError = FALSE
trialData = try(read.table(file, sep = ",", header = T))  #read in the file
if (is.data.frame(trialData)) { #test if there is data in that file, else place in the error vector
if (nrow(trialData) > 2) {
pData = try(participantData[participantData$Participant.. == trialData$SubjectNo[1],]) #get info for current participant
pData$SubjectNo = pData$Participant..
myData = left_join(trialData, pData, by="SubjectNo") #Build rows
allData <- bind_rows(myData, allData) #Add these rows to the giant data frame
} else {
isError = 1
}
} else {
isError = 2
}
if (isError) {
error_files[[length(error_files) + 1]] <- file
}
}
colToSave = c("SubjectNo","VerbDomain","trialNo","itemID",
"verbName","mannerSideBias","pathSideBias",
"kidResponseBias","mannerSideTest","pathSideTest",
"kidResponseTest","Experiment","Verb.Condition",
"Gender","Days.Old",
"Age.Years","Age.Months","Inclusion.Decision",
"Exclude.Reason","Experiment.Group",
"Experiment.x","Experiment.y","Condition",
"extAnswer","extVerbName",
"extMannerSide","extPathSide")
allData$RealExp <- ''
allData$Experiment <- as.character(allData$Experiment)
allData$Experiment.y <- as.character(allData$Experiment.y)
allData <- allData  %>%
select(one_of(colToSave)) %>%
mutate(RealExp = ifelse(is.na(Experiment),Experiment.y,Experiment)) %>% #'Experiment' and 'Condition' were used inconsistently early on but can be derived from levels used
select(-c(VerbDomain, Experiment, Experiment.Group, Experiment.y, Experiment.x, Condition)) %>%
rename(Experiment = RealExp) %>%
rename(Condition = Verb.Condition)
allData1 <- allData %>%
filter(is.na(extAnswer))
allData2 <- allData %>%
filter(!is.na(extAnswer))
allDataBase <- select(allData2, -c(extAnswer, extVerbName, extMannerSide, extPathSide))
allDataExtend <- select(allData2, -c(itemID,verbName,mannerSideBias,pathSideBias,kidResponseBias,mannerSideTest,pathSideTest,kidResponseTest))
allDataExtend <- allDataExtend %>%
mutate(trialNo = trialNo + 8) %>%
rename(verbName = extVerbName)  %>%
rename(mannerSideBias = extMannerSide) %>%
rename(pathSideBias = extPathSide) %>%
rename(kidResponseBias = extAnswer)
allDataExtend$itemID = 'get it from verbname'
allDataExtend$mannerSideTest = 'undefined'
allDataExtend$pathSideTest = 'undefined'
allDataExtend$kidResponseTest = 'undefined'
allData <- select(allData1, -c(extAnswer, extVerbName, extMannerSide, extPathSide))
rbind(allDataBase) %>%
rbind(allDataExtend) %>%
arrange(SubjectNo) %>%
select(Experiment,Condition,SubjectNo,trialNo,itemID,verbName, mannerSideBias:Exclude.Reason)
rm(list=setdiff(ls(), c("allData","adir","ddir","repodir")))
allData <- allData %>%
filter(!is.na(Inclusion.Decision)) %>%
filter(Inclusion.Decision == 1) %>%
select(-c(Inclusion.Decision, Exclude.Reason))
allData <- allData %>%
filter(kidResponseBias == 'z' | kidResponseBias == 'c') %>%
mutate(choseM.Bias = ifelse((mannerSideBias == "L" & kidResponseBias == "z")|
(mannerSideBias == "R" & kidResponseBias == "c"), 1, 0)) %>%
mutate(choseM.Test = ifelse((mannerSideTest == "L" & kidResponseTest == "z")|
(mannerSideTest == "R" & kidResponseTest == "c"), 1, 0)) %>%
mutate(expPhase = ifelse(trialNo>8,"Extension","Base"))
allData <- filter(allData, trialNo>1)
makePlot = function(ydata, ylab="proportion chosing Manner/Action", title=""){
plotData <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition,  ydata$trialNo), sum)
numObs <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$trialNo), length)
names(plotData) <- c("Condition", "trialNo", "choseManner")
plotData$numObs <- numObs$x
#get the binomial conf.intervals per condition per trial
for (cond in unique(plotData$Condition))
{
for (trial in unique(plotData[plotData$Condition == cond,]$trialNo))
{
x = plotData[plotData$Condition == cond & plotData$trialNo == trial,]$choseManner
n = plotData[plotData$Condition == cond & plotData$trialNo == trial,]$numObs
test = prop.test(x, n, conf.level=0.95)
plotData$intLower[plotData$Condition == cond & plotData$trialNo == trial] = test$conf.int[1]
plotData$intUpper[plotData$Condition == cond & plotData$trialNo == trial]  = test$conf.int[2]
plotData$theAvg[plotData$Condition == cond & plotData$trialNo == trial] = x/n
}
}
print(plotData)
pd <- position_dodge(0.1)
ggplot(plotData, aes(x=trialNo, y=theAvg, colour=Condition, group=Condition, ymax = 1)) +
geom_errorbar(aes(ymin=intLower, ymax=intUpper), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
ylab(ylab) +
geom_point(position=pd, size=3) +
coord_cartesian(ylim=c(0,1)) +
ggtitle(title)
}
makePlot(filter(allData, Condition == "Manner" | Condition == "Path"))
makePlot(filter(allData, Condition == "Action" | Condition == "Effect"))
makeBar = function(ydata, ylab="proportion chosing Manner/Action", title="") {
plotData <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$expPhase), sum)
numObs <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$expPhase), length)
names(plotData) <- c("Condition", "Phase", "choseManner")
plotData$numObs <- numObs$x
print(plotData)
for (cond in unique(plotData$Condition)){
for (ph in unique(plotData$Phase)){
x = plotData[plotData$Condition == cond & plotData$Phase == ph,]$choseManner
n = plotData[plotData$Condition == cond & plotData$Phase == ph,]$numObs
test = prop.test(x, n, conf.level=0.95)
plotData$intLower[plotData$Condition == cond & plotData$Phase == ph] = test$conf.int[1]
plotData$intUpper[plotData$Condition == cond & plotData$Phase == ph]  = test$conf.int[2]
plotData$theAvg[plotData$Condition == cond & plotData$Phase == ph] = x/n
}
}
print(plotData)
ggplot(plotData, aes(x=Phase, y=theAvg, fill=Condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=intLower, ymax=intUpper), colour="black", width=.1, position=position_dodge(.9)) + #Why point 9? Hell if I know!
coord_cartesian(ylim=c(0,1))+
ylab(ylab)+
xlab('')+
theme_bw()+
theme(legend.position="none")+
#scale_fill_brewer(palette=colors) +
ggtitle(title)
}
makeBar(filter(allData, Condition == "Manner" | Condition == "Path"))
makeBar(filter(allData, Condition == "Action" | Condition == "Effect"))
levels(allData)
summary(allData)
colnames(allData)
bias <- dataframe(c(allData$SubjectNo,allData$choseM.Bias,allData$choseM.Test))
bias <- data.frame(c(allData$SubjectNo,allData$choseM.Bias,allData$choseM.Test))
View(bias)
View(bias)
View(allData)
bias <- data.frame(allData$SubjectNo,allData$choseM.Bias,allData$choseM.Test)
View(bias)
library(plyr)
ddply(allData,.(SubjectNo),summarize,sum1 = sum(choseM.Bias),sum2 = sum(chosem.Test))
ddply(allData,.(SubjectNo),summarize,sum1 = sum(choseM.Bias),sum2 = sum(choseM.Test))
bias.sums <- ddply(allData,.(SubjectNo),summarize,sum1 = sum(choseM.Bias),sum2 = sum(choseM.Test))
View(bias.sums)
plot(bias.sums)
plot(bias.sums$sum1)
ggplot
ggplot(bias.sums,aes(x = SubjectNo,y=sum1))
colnames(allData)
bias.sums <- ddply(allData,.(SubjectNo,Condition),summarize,sum1 = sum(choseM.Bias),sum2 = sum(choseM.Test))
View(bias.sums)
