#If instead of a table we get an error message, move on!
data = try(read.table(file, sep = ",", header = T, fill=T)) #Fill adds in NAs for blank cells :)
if (length(data) == 1) {next}
#Hack for the consolidated data folder - if it's a non-extension session, skip it! (And drop kids who didn't complete any trials...)
if (dim(data)[2] < 50 || dim(data)[1] < 2) {next}
#test if there is data in that file, else place in the error vector
if (length(data[,1]) > 0)
{
#get info for current participant
info = meta[meta$Participant.. == data$SubjectNo[1],]
for (row in (length(data[,1])-7):length(data[,1]))
{
#store experiment and trialnumber
#output[counter,1] = toString(data$Experiment[row])
#whoopsy, get it from meta I guess!
print(info$Verb.Condition)
output[counter,1] = toString(info$Verb.Condition)
output[counter,2] = data$trialNo[row]
#transform variables into BIAS and TEST
if (data$mannerSideBias[row] == "L" & data$kidResponseBias[row] == "z") output[counter,3] = "MANNERBIAS"
if (data$pathSideBias[row] == "R" & data$kidResponseBias[row] == "c") output[counter,3] = "PATHBIAS"
if (data$mannerSideBias[row] == "R" & data$kidResponseBias[row] == "c") output[counter,3] = "MANNERBIAS"
if (data$pathSideBias[row] == "L" & data$kidResponseBias[row] == "z") output[counter,3] = "PATHBIAS"
if (data$mannerSideTest[row] == "L" & data$kidResponseTest[row] == "z") output[counter,4] = "MANNERBIAS"
if (data$pathSideTest[row] == "R" & data$kidResponseTest[row] == "c") output[counter,4] = "PATHBIAS"
if (data$mannerSideTest[row] == "R" & data$kidResponseTest[row] == "c") output[counter,4] = "MANNERBIAS"
if (data$pathSideTest[row] == "L" & data$kidResponseTest[row] == "z") output[counter,4] = "PATHBIAS"
# transform extension
if (data$extMannerSide[row] == "L" & data$extAnswer[row] == "z" & !is.na(data$extMannerSide[row])) output[counter,9] = "MANNERBIAS"
if (data$extPathSide[row] == "R" & data$extAnswer[row] == "c"& !is.na(data$extPathSide[row])) output[counter,9] = "PATHBIAS"
if (data$extMannerSide[row] == "R" & data$extAnswer[row] == "c"& !is.na(data$extMannerSide[row])) output[counter,9] = "MANNERBIAS"
if (data$extPathSide[row] == "L" & data$extAnswer[row] == "z" & !is.na(data$extPathSide[row])) output[counter,9] = "PATHBIAS"
#Store subject number, days old, age in years and inclusion criteria
output[counter,5] = data$SubjectNo[row]
output[counter,6] = info$Days.Old
output[counter,7] = info$Age.Years
output[counter,8] = info$Inclusion.Decision
#next row
counter = counter + 1
#if(data$SubjectNo[row] == 54) print(data)
}
}
else
{append(error_files, file)}
}
#save data frame
setwd(adir)
write.csv(output, file = paste("all_ext", ".csv", sep = ""))
#show errors
error_files
# #set directory
# dir = setwd("~/Documents/R_stuff/MPP")
# #name of info file
# nameMetaFile = "MannerPath_data.csv"
#
#set directories; might need to change this on your comp!
repodir = "/Users/mekline/Dropbox/_Projects/PrimingMannerPath/MannerPathPriming/"
adir = paste(repodir, "Analysis/", sep="")
ddir = paste(repodir, "MPP_Stim_and_Data/data/" , sep="")
#name of info file
nameMetaFile = paste(repodir,"MannerPath_data.csv",sep="")
####################################################################################
####################################################################################
#get all .dat files in the directory
files = list.files(ddir, pattern = ".dat$")
#create an empty error vector
error_files = c()
#generate an empty data frame for output
output = data.frame(EXPERIMENT = '', TRIAL = '',BIAS = '',TEST = '', SUBNUM = '', DAYSOLD = '', AGEYEARS = '', INCDECISION = '', stringsAsFactors=F)
#load the info data file
setwd(adir)
meta = read.csv(nameMetaFile, sep = ",", header = T)
setwd(ddir)
#loop over files (participants) and the rows in the file
#MK hack - MPP_1 and MPP_2 are formatted differently, so I hid them in a subfolder!
#And currently, this skips the .dat files of all extension participants (anyone with extra columns...)
i=1 #This counter keeps track of the size of the output file (since participants have unpredictable # of trials)
for (j in 1:length(files))
{
file = files[j]
#read in the file
#If instead of a table we get an error message, move on!
data = try(read.table(file, sep = ",", header = T))
if (length(data) == 1) {next}
#test if there is data in that file, else place in the error vector
if (length(data[,1]) > 0)
{
#get info for current participant
info = meta[meta$Participant.. == data$SubjectNo[1],]
for (row in 1:length(data[,1]))
{
#store experiment and trialnumber
output[i,1] = toString(data$Experiment[row])
output[i,2] = data$trialNo[row]
#transform variables into BIAS and TEST
if (data$mannerSideBias[row] == "L" & data$kidResponseBias[row] == "z") output[i,3] = "MANNERBIAS"
if (data$pathSideBias[row] == "R" & data$kidResponseBias[row] == "c") output[i,3] = "PATHBIAS"
if (data$mannerSideBias[row] == "R" & data$kidResponseBias[row] == "c") output[i,3] = "MANNERBIAS"
if (data$pathSideBias[row] == "L" & data$kidResponseBias[row] == "z") output[i,3] = "PATHBIAS"
if (data$mannerSideTest[row] == "L" & data$kidResponseTest[row] == "z") output[i,4] = "MANNERBIAS"
if (data$pathSideTest[row] == "R" & data$kidResponseTest[row] == "c") output[i,4] = "PATHBIAS"
if (data$mannerSideTest[row] == "R" & data$kidResponseTest[row] == "c") output[i,4] = "MANNERBIAS"
if (data$pathSideTest[row] == "L" & data$kidResponseTest[row] == "z") output[i,4] = "PATHBIAS"
#Store subject number, days old, age in years and inclusion criteria
output[i,5] = data$SubjectNo[row]
output[i,6] = info$Days.Old
output[i,7] = info$Age.Years
output[i,8] = info$Inclusion.Decision
i = i+1 #Next row
}
}
else
{append(error_files, file)}
}
#save data frame
setwd(adir)
write.csv(output, file = paste("all", ".csv", sep = ""))
#show errors
error_files
#To get last unique rows...
#d[ !duplicated(d$x,fromLast=TRUE), ]
1+2
library(swirl)
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
1 + 2
foo = 1
help(t.test)
library(dplyr)
library(tidyr)
# This file is going to have the full analysis pipeline for the MannerPath studies!
#It will pull data from the main MannerPath_Data.csv and from the trial data
#(Repo/MPP_Stim_and_Data/Data) from each child. There are (currently) two different
#experiments/conditions in the dataset:
#
# MannerPath - the original version (MP learning/bias), with no extension version
# ActionEffect+Extend - AE learning/bias, followed by MP trials which have only bias phase
# Just for super awesome fun times, subjects before #77 in AE-Extend have a variety of
# slightly different matlab outputs, and some of them only have AE data but no extension.
# Hence data cleaning/reformatting is...a bit messy.
#
# See #TODO for unfinished places
# See line 140ish for analysis
######
# LIBRARIES, FILES, DIRECTORIES
######
library(dplyr)
library(tidyr)
library(ggplot2)
library(lme4)
library(pwr)
rm(list=ls()) #Clear any lingering variables
#Set directories; might need to change this on your computer!
#repodir = "C:/Users/Anna/Documents/GitHub/MannerPathPriming/"
repodir = "/Users/mekline/Dropbox/_Projects/PrimingMannerPath/MannerPathPriming/"
adir = paste(repodir, "Analysis/", sep="")
ddir = paste(repodir, "MPP_Stim_and_Data/Data/" , sep="")
setwd(repodir)
pFile = paste(repodir,"MannerPath_Data.csv",sep="") #get files ready...
files = list.files(ddir, pattern = ".dat$") #all .dat files in data directory
error_files = list() #create an empty error list
participantData = read.csv(pFile, sep = ",", header = T) #load the info data file
######
# INCLUSION INFO
######
#TODO: Do inclusion/exclusion of participants up here, with calculations for type of exclusion
#Print nice summary of subject numbers, ages, gender splits up here
######
# DATA CLEANING
######
#loop over files (participants) and the rows in the file
#For now, just read in all lines of every data file. Assert that all have the same columns
#names at the start, but some may have extra columns if they have extension data. Later on we'll
#clean up and reshape to get nicer formatted data.
#Notes:
# - No .dat files for 1,2, 35, 42, 69 (1-2 pilot, 35-69 kids who consented/are on camera
# but didn't get to the exp)
#
# - Lots of errors are printed anytime we hit a badly formatted .dat file:
# as of 5/4/16 26 files do not load at the pt, because fuss-outs & exp errors sometimes
#also broke the data file too. See MPP_data.csv for inclusion/exclusion
# - 5/4/16: SOMETHING IS UP WITH 64-77, MAY NEED TO RECODE FROM VIDEO or figure out what's wrong with the files!
setwd(ddir)
allData <- data.frame(NULL)
for (file in files) {
isError = FALSE
trialData = try(read.table(file, sep = ",", header = T))  #read in the file
if (is.data.frame(trialData)) { #test if there is data in that file, else place in the error vector
if (nrow(trialData) > 2) {
pData = try(participantData[participantData$Participant.. == trialData$SubjectNo[1],]) #get info for current participant
pData$SubjectNo = pData$Participant..
myData = left_join(trialData, pData, by="SubjectNo") #Build rows
allData <- bind_rows(myData, allData) #Add these rows to the giant data frame
} else {
isError = 1
}
} else {
isError = 2
}
if (isError) {
error_files[[length(error_files) + 1]] <- file
}
}
#It's a great big data frame! Begin by dropping columns that we don't need for analysis (mostly names of individual vid files)
colToSave = c("SubjectNo","VerbDomain","trialNo","itemID",
"verbName","mannerSideBias","pathSideBias",
"kidResponseBias","mannerSideTest","pathSideTest",
"kidResponseTest","Experiment","Verb.Condition",
"Gender","Days.Old",
"Age.Years","Age.Months","Inclusion.Decision",
"Exclude.Reason","Experiment.Group",
"Experiment.x","Experiment.y","Condition",
"extAnswer","extVerbName",
"extMannerSide","extPathSide")
#Recode variable names
allData$RealExp <- ''
allData$Experiment <- as.character(allData$Experiment)
allData$Experiment.y <- as.character(allData$Experiment.y)
allData <- allData  %>%
select(one_of(colToSave)) %>%
mutate(RealExp = ifelse(is.na(Experiment),Experiment.y,Experiment)) %>% #'Experiment' and 'Condition' were used inconsistently early on but can be derived from levels used
select(-c(VerbDomain, Experiment, Experiment.Group, Experiment.y, Experiment.x, Condition)) %>%
rename(Experiment = RealExp) %>%
rename(Condition = Verb.Condition)
allData1 <- allData %>% #A few participants had the extension trials coded on the same lines as trials 1-8, just have to rearrange them
filter(is.na(extAnswer))
allData2 <- allData %>%
filter(!is.na(extAnswer))
#this could all be a gather probably, but it aint working
allDataBase <- select(allData2, -c(extAnswer, extVerbName, extMannerSide, extPathSide))
allDataExtend <- select(allData2, -c(itemID,verbName,mannerSideBias,pathSideBias,kidResponseBias,mannerSideTest,pathSideTest,kidResponseTest))
allDataExtend <- allDataExtend %>%
mutate(trialNo = trialNo + 8) %>%
rename(verbName = extVerbName)  %>%
rename(mannerSideBias = extMannerSide) %>%
rename(pathSideBias = extPathSide) %>%
rename(kidResponseBias = extAnswer)
allDataExtend$itemID = 'get it from verbname'
allDataExtend$mannerSideTest = 'undefined'
allDataExtend$pathSideTest = 'undefined'
allDataExtend$kidResponseTest = 'undefined'
allData <- select(allData1, -c(extAnswer, extVerbName, extMannerSide, extPathSide)) %>% #re-adding the normal ones
rbind(allDataBase) %>% #add base, then ext. trials of the weirdos
rbind(allDataExtend) %>%
arrange(SubjectNo) %>%
select(Experiment,Condition,SubjectNo,trialNo,itemID,verbName, mannerSideBias:Exclude.Reason) #just reordering
rm(list=setdiff(ls(), c("allData","adir","ddir","repodir")))#avoid accidentally referencing placeholder vars from above
allData <- allData %>%
filter(!is.na(Inclusion.Decision)) %>%
filter(Inclusion.Decision == 1) %>% #TODO: Eventually do this above and report stats!
select(-c(Inclusion.Decision, Exclude.Reason))
# Print out a nice table of kids in each condition
table(allData)
# This file is going to have the full analysis pipeline for the MannerPath studies!
#It will pull data from the main MannerPath_Data.csv and from the trial data
#(Repo/MPP_Stim_and_Data/Data) from each child. There are (currently) two different
#experiments/conditions in the dataset:
#
# MannerPath - the original version (MP learning/bias), with no extension version
# ActionEffect+Extend - AE learning/bias, followed by MP trials which have only bias phase
# Just for super awesome fun times, subjects before #77 in AE-Extend have a variety of
# slightly different matlab outputs, and some of them only have AE data but no extension.
# Hence data cleaning/reformatting is...a bit messy.
#
# See #TODO for unfinished places
# See line 140ish for analysis
######
# LIBRARIES, FILES, DIRECTORIES
######
library(dplyr)
library(tidyr)
library(ggplot2)
library(lme4)
library(pwr)
rm(list=ls()) #Clear any lingering variables
#Set directories; might need to change this on your computer!
#repodir = "C:/Users/Anna/Documents/GitHub/MannerPathPriming/"
repodir = "/Users/mekline/Dropbox/_Projects/PrimingMannerPath/MannerPathPriming/"
adir = paste(repodir, "Analysis/", sep="")
ddir = paste(repodir, "MPP_Stim_and_Data/Data/" , sep="")
setwd(repodir)
pFile = paste(repodir,"MannerPath_Data.csv",sep="") #get files ready...
files = list.files(ddir, pattern = ".dat$") #all .dat files in data directory
error_files = list() #create an empty error list
participantData = read.csv(pFile, sep = ",", header = T) #load the info data file
######
# INCLUSION INFO
######
#TODO: Do inclusion/exclusion of participants up here, with calculations for type of exclusion
#Print nice summary of subject numbers, ages, gender splits up here
######
# DATA CLEANING
######
#loop over files (participants) and the rows in the file
#For now, just read in all lines of every data file. Assert that all have the same columns
#names at the start, but some may have extra columns if they have extension data. Later on we'll
#clean up and reshape to get nicer formatted data.
#Notes:
# - No .dat files for 1,2, 35, 42, 69 (1-2 pilot, 35-69 kids who consented/are on camera
# but didn't get to the exp)
#
# - Lots of errors are printed anytime we hit a badly formatted .dat file:
# as of 5/4/16 26 files do not load at the pt, because fuss-outs & exp errors sometimes
#also broke the data file too. See MPP_data.csv for inclusion/exclusion
# - 5/4/16: SOMETHING IS UP WITH 64-77, MAY NEED TO RECODE FROM VIDEO or figure out what's wrong with the files!
setwd(ddir)
allData <- data.frame(NULL)
for (file in files) {
isError = FALSE
trialData = try(read.table(file, sep = ",", header = T))  #read in the file
if (is.data.frame(trialData)) { #test if there is data in that file, else place in the error vector
if (nrow(trialData) > 2) {
pData = try(participantData[participantData$Participant.. == trialData$SubjectNo[1],]) #get info for current participant
pData$SubjectNo = pData$Participant..
myData = left_join(trialData, pData, by="SubjectNo") #Build rows
allData <- bind_rows(myData, allData) #Add these rows to the giant data frame
} else {
isError = 1
}
} else {
isError = 2
}
if (isError) {
error_files[[length(error_files) + 1]] <- file
}
}
#It's a great big data frame! Begin by dropping columns that we don't need for analysis (mostly names of individual vid files)
colToSave = c("SubjectNo","VerbDomain","trialNo","itemID",
"verbName","mannerSideBias","pathSideBias",
"kidResponseBias","mannerSideTest","pathSideTest",
"kidResponseTest","Experiment","Verb.Condition",
"Gender","Days.Old",
"Age.Years","Age.Months","Inclusion.Decision",
"Exclude.Reason","Experiment.Group",
"Experiment.x","Experiment.y","Condition",
"extAnswer","extVerbName",
"extMannerSide","extPathSide")
#Recode variable names
allData$RealExp <- ''
allData$Experiment <- as.character(allData$Experiment)
allData$Experiment.y <- as.character(allData$Experiment.y)
allData <- allData  %>%
select(one_of(colToSave)) %>%
mutate(RealExp = ifelse(is.na(Experiment),Experiment.y,Experiment)) %>% #'Experiment' and 'Condition' were used inconsistently early on but can be derived from levels used
select(-c(VerbDomain, Experiment, Experiment.Group, Experiment.y, Experiment.x, Condition)) %>%
rename(Experiment = RealExp) %>%
rename(Condition = Verb.Condition)
allData1 <- allData %>% #A few participants had the extension trials coded on the same lines as trials 1-8, just have to rearrange them
filter(is.na(extAnswer))
allData2 <- allData %>%
filter(!is.na(extAnswer))
#this could all be a gather probably, but it aint working
allDataBase <- select(allData2, -c(extAnswer, extVerbName, extMannerSide, extPathSide))
allDataExtend <- select(allData2, -c(itemID,verbName,mannerSideBias,pathSideBias,kidResponseBias,mannerSideTest,pathSideTest,kidResponseTest))
allDataExtend <- allDataExtend %>%
mutate(trialNo = trialNo + 8) %>%
rename(verbName = extVerbName)  %>%
rename(mannerSideBias = extMannerSide) %>%
rename(pathSideBias = extPathSide) %>%
rename(kidResponseBias = extAnswer)
allDataExtend$itemID = 'get it from verbname'
allDataExtend$mannerSideTest = 'undefined'
allDataExtend$pathSideTest = 'undefined'
allDataExtend$kidResponseTest = 'undefined'
allData <- select(allData1, -c(extAnswer, extVerbName, extMannerSide, extPathSide)) %>% #re-adding the normal ones
rbind(allDataBase) %>% #add base, then ext. trials of the weirdos
rbind(allDataExtend) %>%
arrange(SubjectNo) %>%
select(Experiment,Condition,SubjectNo,trialNo,itemID,verbName, mannerSideBias:Exclude.Reason) #just reordering
rm(list=setdiff(ls(), c("allData","adir","ddir","repodir")))#avoid accidentally referencing placeholder vars from above
allData <- allData %>%
filter(!is.na(Inclusion.Decision)) %>%
filter(Inclusion.Decision == 1) %>% #TODO: Eventually do this above and report stats!
select(-c(Inclusion.Decision, Exclude.Reason))
# Print out a nice table of kids in each condition
table(allData)
View(allData)
#TODO: Probably a good idea to print out a sanitized csv here for people who don't want to run the data cleaning....
#TODO: Checks for effects of side bias go here
allData <- allData %>% #Translate kid choice variables to objective 'choseM' for Bias (main) & Test (sanity check - did they learn the verb)
filter(kidResponseBias == 'z' | kidResponseBias == 'c') %>% #remove trials w/ no answer on critical Bias q
mutate(choseM.Bias = ifelse((mannerSideBias == "L" & kidResponseBias == "z")|
(mannerSideBias == "R" & kidResponseBias == "c"), 1, 0)) %>%
mutate(choseM.Test = ifelse((mannerSideTest == "L" & kidResponseTest == "z")|
(mannerSideTest == "R" & kidResponseTest == "c"), 1, 0)) %>%
mutate(expPhase = ifelse(trialNo>8,"Extension","Base")) #Mark trials 1-8 and 9-16
######
#IMPORTANT!
######
allData <- filter(allData, trialNo>1) #Trial #1 Bias test is pre-training!!
#Anna run to here
######
# GRAPHS
######
makePlot = function(ydata, ylab="proportion chosing Manner/Action", title=""){
plotData <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition,  ydata$trialNo), sum)
numObs <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$trialNo), length)
names(plotData) <- c("Condition", "trialNo", "choseManner")
plotData$numObs <- numObs$x
#get the binomial conf.intervals per condition per trial
for (cond in unique(plotData$Condition))
{
for (trial in unique(plotData[plotData$Condition == cond,]$trialNo))
{
x = plotData[plotData$Condition == cond & plotData$trialNo == trial,]$choseManner
n = plotData[plotData$Condition == cond & plotData$trialNo == trial,]$numObs
test = prop.test(x, n, conf.level=0.95)
plotData$intLower[plotData$Condition == cond & plotData$trialNo == trial] = test$conf.int[1]
plotData$intUpper[plotData$Condition == cond & plotData$trialNo == trial]  = test$conf.int[2]
plotData$theAvg[plotData$Condition == cond & plotData$trialNo == trial] = x/n
}
}
#print(plotData)
#make a plot with ggplot
pd <- position_dodge(0.1)
ggplot(plotData, aes(x=trialNo, y=theAvg, colour=Condition, group=Condition, ymax = 1)) +
geom_errorbar(aes(ymin=intLower, ymax=intUpper), colour="black", width=.1, position=pd) +
geom_line(position=pd) +
ylab(ylab) +
geom_point(position=pd, size=3) +
coord_cartesian(ylim=c(0,1)) +
ggtitle(title)
#scale_colour_manual(values = c("green","red"),
#name="",
#labels=c("Manner", "Path")) +
}
makePlot(filter(allData, Condition == "Manner" | Condition == "Path"))
makePlot(filter(allData, Condition == "Action" | Condition == "Effect"))
makeBar = function(ydata, ylab="proportion chosing Manner/Action", title="") {
plotData <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$expPhase), sum)
numObs <- aggregate(ydata$choseM.Bias, by=list(ydata$Condition, ydata$expPhase), length)
names(plotData) <- c("Condition", "Phase", "choseManner")
plotData$numObs <- numObs$x
print(plotData)
for (cond in unique(plotData$Condition)){
for (ph in unique(plotData$Phase)){
x = plotData[plotData$Condition == cond & plotData$Phase == ph,]$choseManner
n = plotData[plotData$Condition == cond & plotData$Phase == ph,]$numObs
test = prop.test(x, n, conf.level=0.95)
plotData$intLower[plotData$Condition == cond & plotData$Phase == ph] = test$conf.int[1]
plotData$intUpper[plotData$Condition == cond & plotData$Phase == ph]  = test$conf.int[2]
plotData$theAvg[plotData$Condition == cond & plotData$Phase == ph] = x/n
}
}
ggplot(plotData, aes(x=Phase, y=theAvg, fill=Condition)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=intLower, ymax=intUpper), colour="black", width=.1, position=position_dodge(.9)) + #Why point 9? Hell if I know!
coord_cartesian(ylim=c(0,1))+
ylab(ylab)+
xlab('')+
theme_bw()+
#scale_colour_manual(values = c("green","red")) +
#scale_fill_brewer(palette=colors) +
ggtitle(title)
}
makeBar(filter(allData, Condition == "Manner" | Condition == "Path"))
makeBar(filter(allData, Condition == "Action" | Condition == "Effect"))
########
#ANNA EXPLORATORY ANALYSIS
########
bias <- data.frame(allData$SubjectNo,allData$choseM.Bias,allData$choseM.Test)
library(plyr)
bias.sums <- ddply(allData,.(SubjectNo,Condition),summarize,sum1 = sum(choseM.Bias),sum2 = sum(choseM.Test))
# sum1 is the sum of action choices in the bias test trials
# sum2 is the sum of manner choices in the last 8 manner/path test trials in the end
plot(bias.sums($sum2,$condition == action),($sum1, $condition == action))
# On the y axis, I'm trying to plot all the rows of the sum1 column where
# condition = action.
# On the x axis, I'm trying to plot all the
# rows of the sum2 column where condition = action.
# (except for some reason it's not working because for all the action or effect
# conditions, choseM.test = NA)
# and then do the opposite for the effect condition.
# what I actually want are three "sums": their score on training, their score on the
# bias test trials, and their score on the manner/path test trials; each out of 8.
######
# ANALYSIS
######
# POWER CALCULATION
#Let's assume gods of CLT smiled & those are normally enough distributed.  Power calculations!!!
#(NOTE: we use a 1 sided t test for power calculations because of not being sure how to
#correctly run power analyses for the lmms correctly. These power calculations are probably
#generous.)
#6/2/16 Power calculation for determining sample sizes to be used in Exp2 onward
Exp1 <- filter(allData, Experiment == "E1 - MannerPath")
pwrData <- aggregate(Exp1$choseM.Bias, by=list(Exp1$Condition, Exp1$SubjectNo), sum)
names(pwrData) <- c("Condition", "SubNo", "choseMScore")
#Each S now has a score from 0 to 7 (= n of times chose M on bias phase of trials 2-8)
mm <- filter(pwrData, Condition == "Manner")$choseMScore
pp <- filter(pwrData, Condition == "Path")$choseMScore
pooled_sd <- sqrt((sd(mm)^2 + sd(pp)^2)/2)
d <- (mean(mm)-mean(pp))/pooled_sd
n <-min(length(mm), length(pp)) #per cell!!
#This test indicates that our power is 0.24 in Exp 1 (pilot, M/P training only). Yikes!
pwr.t.test(d=d,n=n,sig.level=0.05, type="two.sample", alternative="greater") #We test the h that kids are more likely to make manner choices after manner training
#We would like to have power = .80, but we would also like to run a # of subjects that is in our budget. How bad is pwr = 0.8?
pwr.t.test(d=d,power = 0.8, sig.level=0.05, type="two.sample", alternative="greater") #We test the h that kids are more likely to make manner choices after manner training
#99/cell is wildly outside what we can afford to test. Havasi used 32/cell:
pwr.t.test(d=d,n=32, sig.level=0.05, type="two.sample", alternative="greater")
#...which is still very underpowered.  We will therefore plan to run Exp 2 to 32/cell, and if
# that is nonsignificant, continue to 64/cell (100% increase, pwr=0.6). Whatever # is
#reached in this procedure will be fixed for all subsequent experiments.
pwr.t.test(d=d,n=64, sig.level=0.05, type="two.sample", alternative="greater")
# SUMMARY/DESCRIPTIVE STATISTICS
#How many S's included? Collapse to 'chose manner' score rather than individual trial responses - notice for 'extend' this collapses the 2 experiment phases, DON"T use these for stats, jsut S level info :)
scoreData <- aggregate(allData$choseM.Bias, by=list(allData$Experiment, allData$Condition, allData$SubjectNo), sum)
names(scoreData) <- c("Experiment", "Condition", "SubNo", "choseMScore")
table(scoreData$Experiment, scoreData$Condition)
unique(scoreData$SubNo)
